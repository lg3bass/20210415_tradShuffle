<jittershader name="thebookofshaders">
	<description>GL3 stub 20210413</description>
	<param name="jit_position" type="vec3" state="POSITION" />
	<param name="jit_texcoord" type="vec2" state="TEXCOORD" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="u_resolution" type="vec2" state="TEXDIM0" />
	<param name="u_mouse" type="vec2" default="0 0" />
    <param name="u_time" type="float" default="0" />
    <param name="ADSRdata" type="int" default="1" />
    <param name="mode" type="int" default="0" />
    <param name="elements1" type="int" default="4" />
    <param name="elements2" type="int" default="4" />
    <param name="elements3" type="int" default="4" />
    <param name="elements4" type="int" default="4" />
    <param name="elements5" type="int" default="4" />
	    
	<param name="layerAngle1" type="float" default="0.0" />
	<param name="layer1enabled" type="bool" default="1" />
	<param name="c1" type="vec4" default="1. 0. 0. 1." />
	<param name="param1_1" type="float" default="0.15" />
	<param name="param1_2" type="float" default="0.15" />
	<param name="param1_3" type="float" default="0.0" />
	<param name="param1_4" type="float" default="0.0" />
	<param name="param1_5" type="float" default="0.0" />
	<param name="param1_6" type="float" default="0.0" />

	<param name="layerAngle2" type="float" default="0.0" />
	<param name="layer2enabled" type="bool" default="1" />
	<param name="c2" type="vec4" default="0. 1. 1. 1." />
	<param name="param2_1" type="float" default="0.15" />
	<param name="param2_2" type="float" default="0.23" />
	<param name="param2_3" type="float" default="0.0" />
	<param name="param2_4" type="float" default="0.0" />
	<param name="param2_5" type="float" default="0.0" />
	<param name="param2_6" type="float" default="0.0" />
	
	<param name="layerAngle3" type="float" default="0.0" />
	<param name="layer3enabled" type="bool" default="1" />
	<param name="c3" type="vec4" default="0. 1. 0. 1." />
	<param name="param3_1" type="float" default="0.15" />
	<param name="param3_2" type="float" default="0.3" />
	<param name="param3_3" type="float" default="0.0" />
	<param name="param3_4" type="float" default="0.0" />
	<param name="param3_5" type="float" default="0.0" />
	<param name="param3_6" type="float" default="0.0" />
	
	<param name="layerAngle4" type="float" default="0.0" />
	<param name="layer4enabled" type="bool" default="1" />
	<param name="c4" type="vec4" default="0. 0. 1. 1." />
	<param name="param4_1" type="float" default="0.15" />
	<param name="param4_2" type="float" default="0.4" />
	<param name="param4_3" type="float" default="0.0" />
	<param name="param4_4" type="float" default="0.0" />
	<param name="param4_5" type="float" default="0.0" />
	<param name="param4_6" type="float" default="0.0" />

	<param name="layerAngle5" type="float" default="0.0" />
	<param name="layer5enabled" type="bool" default="1" />
	<param name="c5" type="vec4" default="1. 1. 0. 1." />
	<param name="param5_1" type="float" default="0.1" />
	<param name="param5_2" type="float" default="0.35" />
	<param name="param5_3" type="float" default="0.0" />
	<param name="param5_4" type="float" default="0.0" />
	<param name="param5_5" type="float" default="0.0" />
	<param name="param5_6" type="float" default="0.0" />	
	<param name="hero_1" type="float" default="0.0" />
	<param name="hero_2" type="float" default="0.25" />
	<param name="hero_3" type="float" default="0.50" />
	<param name="hero_4" type="float" default="0.75" />
	<param name="hero_5" type="float" default="1.0" />
	<param name="hero_6" type="float" default="0.0" />	
	<param name="hero_7" type="float" default="0.0" />
	<param name="hero_8" type="float" default="0.0" />	
	
	<language name="glsl" version="1.5">
		<bind param="jit_position" program="vp" />
		<bind param="jit_texcoord" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="u_resolution" program="fp" />
		<bind param="u_mouse" program="fp" />
		<bind param="u_time" program="fp" />
		<bind param="ADSRdata" program="fp" />
		<bind param="mode" program="fp" />
		<bind param="elements1" program="fp" />
		<bind param="elements2" program="fp" />
		<bind param="elements3" program="fp" />
		<bind param="elements4" program="fp" />
		<bind param="elements5" program="fp" />
		
		<bind param="layerAngle1" program="fp" />
		<bind param="layer1enabled" program="fp" />
		<bind param="c1" program="fp" />
		<bind param="param1_1" program="vp" />
		<bind param="param1_2" program="vp" />
		<bind param="param1_3" program="vp" />
		<bind param="param1_4" program="vp" />
		<bind param="param1_5" program="vp" />
		<bind param="param1_6" program="vp" />		
		
		<bind param="layerAngle2" program="fp" />
		<bind param="layer2enabled" program="fp" />
		<bind param="c2" program="fp" />
		<bind param="param2_1" program="vp" />
		<bind param="param2_2" program="vp" />
		<bind param="param2_3" program="vp" />
		<bind param="param2_4" program="vp" />
		<bind param="param2_5" program="vp" />
		<bind param="param2_6" program="vp" />	
		
		<bind param="layerAngle3" program="fp" />
		<bind param="layer3enabled" program="fp" />
		<bind param="c3" program="fp" />
		<bind param="param3_1" program="vp" />
		<bind param="param3_2" program="vp" />
		<bind param="param3_3" program="vp" />
		<bind param="param3_4" program="vp" />
		<bind param="param3_5" program="vp" />
		<bind param="param3_6" program="vp" />

		<bind param="layerAngle4" program="fp" />
		<bind param="layer4enabled" program="fp" />
		<bind param="c4" program="fp" />
		<bind param="param4_1" program="vp" />
		<bind param="param4_2" program="vp" />
		<bind param="param4_3" program="vp" />
		<bind param="param4_4" program="vp" />
		<bind param="param4_5" program="vp" />
		<bind param="param4_6" program="vp" />

		<bind param="layerAngle5" program="fp" />
		<bind param="layer5enabled" program="fp" />
		<bind param="c5" program="fp" />
		<bind param="param5_1" program="vp" />
		<bind param="param5_2" program="vp" />
		<bind param="param5_3" program="vp" />
		<bind param="param5_4" program="vp" />
		<bind param="param5_5" program="vp" />
		<bind param="param5_6" program="vp" />
		<bind param="hero_1" program="vp" />
		<bind param="hero_2" program="vp" />
		<bind param="hero_3" program="vp" />
		<bind param="hero_4" program="vp" />
		<bind param="hero_5" program="vp" />
		<bind param="hero_6" program="vp" />
		<bind param="hero_7" program="vp" />
		<bind param="hero_8" program="vp" />

		
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core

in vec3 jit_position;
in vec2 jit_texcoord;
uniform mat4 textureMatrix0;
uniform mat4 modelViewProjectionMatrix;

out jit_PerVertex {
	vec2 texcoord;	
} jit_out;

void main() {	
	gl_Position = modelViewProjectionMatrix * vec4(jit_position, 1.);	
	jit_out.texcoord = vec2(textureMatrix0*vec4(jit_texcoord, 0., 1.));

}
]]>
		</program>
		<program name="fp" type="fragment">
<!-- MAINTAIN THIS OFFSET SO YOU CAN DEBUG BY LINE NUMBER + 200 -->

























<!-- MAINTAIN THIS OFFSET SO YOU CAN DEBUG BY LINE NUMBER + 200 -->
<![CDATA[
#version 330 core

#define CNT 16
#define PI 3.1459265358979
#define TWO_PI 6.28318530718
#define TAU PI * 2.0

in jit_PerVertex {
	vec2 texcoord;
} jit_in;

//main color out
//www.khronos.org/opengl/wiki/Layout_Qualifier_(GLSL)
layout (location = 0) out vec4 outColor;


//bookofshaders
uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

uniform sampler2DRect ADSRdata;
uniform int mode;

uniform int elements1;
uniform int elements2;
uniform int elements3;
uniform int elements4;
uniform int elements5;

//track1
uniform float layerAngle1;
uniform bool layer1enabled;
uniform vec4 c1;
uniform float param1_1;				//0.0
uniform float param1_2;				//0.0
uniform float param1_3;				//0.0
uniform float param1_4;				//0.0	
uniform float param1_5;				//0.0
uniform float param1_6;				//0.0	

//track2
uniform float layerAngle2;
uniform bool layer2enabled;
uniform vec4 c2;
uniform float param2_1;				//0.0
uniform float param2_2;				//0.0
uniform float param2_3;				//0.0
uniform float param2_4;				//0.0	
uniform float param2_5;				//0.0
uniform float param2_6;				//0.0	

//track3
uniform float layerAngle3;
uniform bool layer3enabled;
uniform vec4 c3;
uniform float param3_1;				//0.0
uniform float param3_2;				//0.0
uniform float param3_3;				//0.0
uniform float param3_4;				//0.0	
uniform float param3_5;				//0.0
uniform float param3_6;				//0.0	

//track4
uniform float layerAngle4;
uniform bool layer4enabled;
uniform vec4 c4;
uniform float param4_1;				//0.0
uniform float param4_2;				//0.0
uniform float param4_3;				//0.0
uniform float param4_4;				//0.0	
uniform float param4_5;				//0.0
uniform float param4_6;				//0.0	

//track5
uniform float layerAngle5;
uniform bool layer5enabled;
uniform vec4 c5;
uniform float param5_1;				//0.0
uniform float param5_2;				//0.0
uniform float param5_3;				//0.0
uniform float param5_4;				//0.0	
uniform float param5_5;				//0.0
uniform float param5_6;				//0.0	
//hero midi in
uniform float hero_1;				//0.0
uniform float hero_2;				//0.0
uniform float hero_3;				//0.0
uniform float hero_4;				//0.0	
uniform float hero_5;				//0.0
uniform float hero_6;				//0.0	
uniform float hero_7;				//0.0
uniform float hero_8;				//0.0	

//FUNCTIONS
//========================================================================================

float linearstep(float begin, float end, float t) {
    return clamp((t - begin) / (end - begin), 0.0, 1.0);
}

float stroke(float x, float s, float w){
	float d = step(s, x+w * 0.5) - step(s, x - w * 0.5);
	return clamp(d,0.0,1.0);
}
	
float fill(float x, float size){
	return 1.0 - step(size, x);
}

float flip(float v, float pct){
	return mix(v,1.0-v,pct);
}

float circleSDF(vec2 st){
	return length(st-0.5)*2.0;
}

float rectSDF(vec2 st, vec2 s) {
    st = st*2.-1.;
    return max( abs(st.x/s.x),
                abs(st.y/s.y) );
}

float triSDF(vec2 st) {
    st = (st*2.-1.)*2.;
    return max(abs(st.x) * 0.866025 + st.y * 0.5, -st.y * 0.5);
}

float hexSDF(vec2 st) {
    st = abs(st*2.-1.);
    return max(abs(st.y), st.x * 0.866025 + st.y * 0.5);
}

float polySDF(vec2 st, int V) {
    st = st*2.-1.;
    float a = atan(st.x,st.y)+PI;
    float r = length(st);
    float v = TAU/float(V);
    return cos(floor(.5+a/v)*v-a)*r;
}

void rotateShape(inout vec2 _st, float a){
	_st = mat2( cos(a) , -sin(a), sin(a), cos(a) ) * (_st - 0.5);
	_st += 0.5;
}

void translateShape(inout vec2 _st, vec2 pos){
	_st += pos;
}

//source: https://www.iquilezles.org/www/articles/functions/functions.htm
float pcurve( float x, float a, float b , float amp)
{
    float k = pow(a+b,a+b) / (pow(a,a)*pow(b,b));
    
    float curve = k * pow( x, a ) * pow( 1.0-x, b );
    return curve * amp;
}

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}


float plot(vec2 st, float pct){
  return  smoothstep( pct-0.02, pct, st.y) -
          smoothstep( pct, pct+0.02, st.y);
}


//TRACKS
//========================================================================================

float trackSTUB(inout vec2 _st, float time, float instance){

	//modifiable params
	float thisAngle = 360.0/float(elements2);	
	
	float thisSize = 1.0 * param2_1;
	float thisOffset = 1.0 * param2_2;
	float thisLocalAngle = 180.0 * param2_3;

	//SETUP TRANS and ROTATION
	float shape  = 0;
	rotateShape(_st,radians(thisAngle*instance));
	translateShape(_st,vec2(0.0,thisOffset));
	rotateShape(_st,radians(thisLocalAngle));
	
	
	//ATTACK
	if(time >= 0.0 && time < 0.25){
	
		float modT = linearstep(0.0,0.25,time);		

	}


	//DECAY
	if(time >= 0.25 && time < 0.5){

		float modT = linearstep(0.25,0.50,time);
		
	}

	//SUSTAIN
	if(time >= 0.5 && time < 0.75){
	
		float modT = linearstep(0.5,0.75,time);		
		
	}

	//RELEASE
	if(time >= 0.75 && time <= 1.0){

		float modT = linearstep(0.75,1.0,time);


	}	
	
	return shape;

}




float track1(inout vec2 _st, float time, float i){

	float rectH = map(param1_2,0.0,1.0,-0.0,0.5);//0.170;
	float rectW = map(param1_3,0.0,1.0,-0.0,0.5);//0.150;

	//modifiable params
	float thisAngle = 360.0/float(elements1);	

	//SETUP TRANS and ROTATION
	float shape  = 0.0;
	rotateShape(_st,radians(thisAngle*i));

	//set the starting point at 0. (center)
	translateShape(_st,vec2(0.0, param1_1));
	//rotateShape(_st,radians(thisLocalAngle));

	//time = 0.24623;

	//min off
	if(time == 0.0){  
		shape = 1.0;
	}

	//ATTACK
	if(time > 0.0 && time < 0.25){

		float modT = linearstep(0.0,0.25,time);
		modT = pow(linearstep(0.0,0.25,time),0.7);		
		shape = rectSDF(_st,vec2(modT*rectH, rectW));
	}

	//DECAY
	if(time >= 0.25 && time < 0.5){

		float modT = linearstep(0.25,0.50,time);
		float pulse1 = pcurve(modT, 0.70497, 10.0, 0.22161);
		shape = rectSDF(_st,vec2(rectH+(pulse1/2.0), rectW+pulse1));
	}

	//SUSTAIN
	if(time >= 0.5 && time < 0.75){

		float modT = linearstep(0.5,0.75,time);	
		shape = rectSDF(_st,vec2(rectH, rectW));
	}

	//RELEASE
	if(time >= 0.75 && time < 1.0){

		float modT = linearstep(0.75,1.0,time);
		shape = rectSDF(_st,vec2(rectH, (1.0-modT)*rectW));
	}

	//max off
	if(time == 1.0){  
		shape = 1.0;
	}  

	return shape;

}




float circlesGridObject1(inout vec2 st, in float time, int row, int col, int dim, float radius, float spread){
  
  //radius = 0.08435;
  //spread = 0.21589;

  float shape = 0.0;
  
  //time overide(for testing)
  //time = 0.19672;
  
  //min off
  if(time == 0.0){  
    shape = 0.0;
  }

  //ATTACK
  if(time > 0.0 && time < 0.25){

    float modT = pow(linearstep(0.0,0.25,time),0.33);
    modT = pow(linearstep(0.0,0.25,time),3.4);

    float cutoutRadius = modT*radius;//PARAM 
    float spread = -(modT*spread);
    float shift = spread;
    if(dim == 2){
      shift -= spread/2.0;
    } else if (dim == 4){
      shift += spread/2.0;
    }

    float yPos = (float(row)*-spread)+shift;
    float xPos = (float(col)*-spread)+shift;

    float cutout1 = circleSDF(st+vec2(xPos, yPos));
    float cutoutComp1 = smoothstep(cutoutRadius+0.05,cutoutRadius,cutout1);

    shape = cutoutComp1;

  }

  //DECAY
  if(time >= 0.25 && time < 0.5){

    float modT = linearstep(0.25,0.50,time);
	float pulse1 = 1.0-pcurve(modT, 1.0, 2.0, 0.3);
	pulse1 = 1.0-pcurve(modT, 1.0, 8.0, 0.2);
    float cutoutRadius = radius*pulse1;//PARAM 
    float spread = -spread;
    float shift = spread;
    if(dim == 2){
      shift -= spread/2.0;
    } else if (dim == 4){
      shift += spread/2.0;
    }

    float yPos = (float(row)*-spread)+shift;
    float xPos = (float(col)*-spread)+shift;

    float cutout1 = circleSDF(st+vec2(xPos, yPos));
    float cutoutComp1 = smoothstep(cutoutRadius+(0.05*pulse1),cutoutRadius,cutout1);

    shape = cutoutComp1;
  }

  //SUSTAIN
  if(time >= 0.5 && time < 0.75){

    float modT = linearstep(0.5,0.75,time);		

    float cutoutRadius = radius;//PARAM 
    float spread = -spread;
    float shift = spread;
    if(dim == 2){
      shift -= spread/2.0;
    } else if (dim == 4){
      shift += spread/2.0;
    }

    float yPos = (float(row)*-spread)+shift;
    float xPos = (float(col)*-spread)+shift;

    float cutout1 = circleSDF(st+vec2(xPos, yPos));
    float cutoutComp1 = smoothstep(cutoutRadius+0.05,cutoutRadius,cutout1);

    shape = cutoutComp1;
  }

  //RELEASE
  if(time >= 0.75 && time < 1.0){

    float modT = linearstep(0.75,1.0,time);
    modT = pow(linearstep(0.75,1.0,time),0.3);
     
    
    //map(modT, 0.0, 1.0, 1.0, 0.0);

    float cutoutRadius = (1.0-modT)*radius;//PARAM 
    float spread = -spread;
    float shift = spread;
    if(dim == 2){
      shift -= spread/2.0;
    } else if (dim == 4){
      shift += spread/2.0;
    }

    float yPos = (float(row)*-spread)+shift;
    float xPos = (float(col)*-spread)+shift;

    float cutout1 = circleSDF(st+vec2(xPos, yPos));
    float cutoutComp1 = smoothstep(cutoutRadius+0.05,cutoutRadius,cutout1);

    shape = cutoutComp1;  
  }

  //max off
  if(time == 1.0){  
    shape = 0.0;
  }
  
  return shape;
}


float heroTrack5(inout vec2 _st, float time, float instance){

	//modifiable params
	float thisAngle = 360.0/float(elements5);	
	
	float thisSize = 1.0 * param5_1;
	float thisOffset = 1.0 * param5_2;
	float thisLocalAngle = 180.0 * param5_3;

	//SETUP TRANS and ROTATION
	float shape  = 0;
	rotateShape(_st,radians(thisAngle*instance));
	translateShape(_st,vec2(0.0,thisOffset));
	
	//make a diamond first.
	rotateShape(_st,radians(45.0));
	rotateShape(_st,radians(thisLocalAngle));
	
	float baseShape = rectSDF(_st,vec2(1.0,1.0));
	
	
	//ATTACK
	if(time >= 0.0 && time < 0.25){
	
		float modT = linearstep(0.0,0.25,time);		
		float size = pow(modT,4.0)*thisSize;
		
		shape = fill(baseShape,size);

	}


	//DECAY
	if(time >= 0.25 && time < 0.5){

		float modT = linearstep(0.25,0.50,time);	
		float pulse = pcurve( modT, 0.8, 15.0 , 0.1);
		float size1 = thisSize+pulse;
		shape = fill(baseShape,size1);
		
	}

	//SUSTAIN
	if(time >= 0.5 && time < 0.75){
	
		float modT = linearstep(0.5,0.75,time);		
		float size1 = thisSize;
		shape = fill(baseShape,size1);
		
	}

	//RELEASE
	if(time >= 0.75 && time <= 1.0){

		float modT = linearstep(0.75,1.0,time);
		float size1 = pow(1.0-modT,4.0)*thisSize;
		shape = fill(baseShape,size1);

	}	
	
	return shape;

}


//MAIN
//========================================================================================

void main() {

	int animated = 0;
	
	float t;
	
	if(animated == 0){		
		t = fract(u_time / 04.0);
	} else {
		t = 0.0;
	}

	vec2 st = jit_in.texcoord.st/u_resolution.xy;

	//50% performance increase if you DON'T USE a struct !!!!!	
	vec2	st_1[CNT],		st_2[CNT],		st_3[CNT],		st_4[CNT],		st_5[CNT];
	float 	time_1[CNT],	time_2[CNT],	time_3[CNT],	time_4[CNT],	time_5[CNT];

	
	float	mask_1,			mask_2,			mask_3,			mask_4,			mask_5 			= 0.0;
	vec3	color_1,		color_2,		color_3,		color_4,		color_5			= vec3(0.0);
	
	float	dist1,			dist2,			dist3,			dist4,			dist5			= 0.0;
	
	
	if(mode == 1){
	
		time_5[0] = hero_1;
		time_5[1] = hero_2;
		time_5[2] = hero_3;
		time_5[3] = hero_4;
		time_5[4] = hero_5;
		time_5[5] = hero_6;
		time_5[6] = hero_7;
		time_5[7] = hero_8;

	
	}

	vec2 st_B = st;
	rotateShape(st_B,radians(param1_5*180.));

	float combined = 0.0;

	float outsideBorder = rectSDF(st_B , vec2(1.0, 1.0));

	float border = param1_6;//PARAM
	float outsideBorderComp = smoothstep(border,border+0.1,outsideBorder);

	
	//MAIN FOR LOOP
	for(int i=0;i < CNT; i++){
		
		vec4 item = vec4(0.0);
		
		if(mode == 1){
			item = texture(ADSRdata, vec2(float(i)+0.5,float(0)+0.5));
		
			time_1[i] = item.a;		//plane 0
			time_2[i] = item.x;
			time_3[i] = item.y;
			time_4[i] = item.z;
			
		
		} else if (mode == 0) {
			time_1[i] = t;
			time_2[i] = t;
			time_3[i] = t;
			time_4[i] = t;
			time_5[i] = t;
		}
	
		
		if(layer1enabled) {		
			if(i < elements1){
			//TRACK1
		
				st_1[i] = st;
				float tempShape = track1(st_1[i], time_1[i], float(i));
				dist1 = max(dist1, fill(tempShape,1.0)-tempShape);
		
			}		
		}
		
		
		if(layer2enabled) {
			st_2[i] = st;
		}
		
		
		if(layer3enabled) {
			st_3[i] = st;

		}

		if(layer4enabled) {
			st_4[i] = st;
		}
		
		//ADD HERO
		if(layer5enabled) {
			if(i < elements5){
	
				st_5[i] = st;
				//mask_5 += heroTrack5(st_5[i], time_5[i], float(i));
				//color_5 = vec3(mask_5*c5.r,mask_5*c5.g,mask_5*c5.b);

			}
		}		
		

	} // END MAIN FOR

		
	if(layer2enabled) {
	
			//pass in just the individual object
			int c2 = 0;
			int d2 = 2;
			
			if(elements2 == 4){
				d2 = 2;
			} else if (elements2 == 9) {
				d2 = 3;
			} else if (elements2 == 16) {
				d2 = 4;
			} else {
				d2 = 2;
			}
			
			//int d1 = 4;
			float radius2 = map(param2_1, 0.0,1.0,0.0,0.4);
			float spread2 = map(param2_2, 0.0,1.0,0.0,0.4);//0.22125;
			for(int i = 0; i < d2;i++){
				for(int j = 0; j < d2;j++){
					float tempShape = circlesGridObject1(st_2[c2], time_2[c2], i, j, d2, radius2, spread2);
					dist2 = max(dist2,tempShape);
					c2++;
				}
			}
	}	

	if(layer3enabled) {
	
			//pass in just the individual object
			int c3 = 0;
			int d3 = 2;
			if(elements3 == 4){
				d3 = 2;
			} else if (elements3 == 9) {
				d3 = 3;
			} else if (elements3 == 16) {
				d3 = 4;
			} else {
				d3 = 2;
			}
			
			float radius3 = map(param3_1, 0.0,1.0,0.0,0.4);//0.11356;
			float spread3 = map(param3_2, 0.0,1.0,0.0,0.4);//0.33308;
			for(int i = 0; i < d3;i++){
				for(int j = 0; j < d3;j++){
					float tempShape = circlesGridObject1(st_3[c3], time_3[c3], i, j, d3, radius3, spread3);
					dist3 = max(dist3,tempShape);
					c3++;
				}
			}
	}
	

  //==================================
  //layer assembly
  combined = max(outsideBorderComp,dist2);   
  combined = 1.0-max(combined,dist3);
  combined = max(0.0,max(combined,dist3));
  
  mask_1 = smoothstep(fwidth(combined*0.33500), 1.01876, combined);
  
  combined += max(combined,dist1);
  combined += dist1;
    
  float value_1 = mask_1 * pow(min(1.0,abs(combined - 2.0)*1.29020), 2.0);
  
  //default
  //mask_1 = smoothstep(fwidth(combined*4.0), -0.5, combined);
  //value_1 = mask_1 * pow(min(1.0,abs(combined + 0.4)*4.0), 40.);
  
  vec3 refractedBackground = mix(vec3(0.110, 0.060, 0.760), vec3(0.995, 0.548, 0.131), min(1., length(st-0.5) * 1.0));

  
  vec3 col = vec3(combined);
  
  //col = vec3(dist1);
  
  col = vec3(value_1)+refractedBackground; 



/*
		
	//vec3 mixLayerA = mix(color_1,color_2,mask_2-0.1);
	vec3 mixLayerA = max(color_1,color_2);
	vec3 mixLayerB = mix(color_3,mixLayerA,mask_3-0.6);
	
	vec3 mixLayerC = max(mixLayerA,mixLayerB);
	
	vec3 mixLayerD = max(color_4,mixLayerC);
	
	
	vec3 finalColor = max(color_5, mixLayerD);

*/




	
	


//PLOT TESTING 
float testCurve = 1.0-pcurve(st.x, 1.0, 6.0, 0.3);
//testCurve = linearstep(0.0,0.25,st.x);
//testCurve = pow(linearstep(0.0,0.25,st.x),1.4);

float pct = plot(st,testCurve);
vec3 test = pct*vec3(1.0);

//uncomment "test" line OVERIDE THE outColor
outColor = vec4(col,1.0);
//outColor = vec4(test,1.0);

	

}	
]]>
		</program>
	</language>
</jittershader>
